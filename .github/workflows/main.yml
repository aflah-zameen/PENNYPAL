name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # ---------------------------
      # Checkout repo
      # ---------------------------
      - name: Checkout Code
        uses: actions/checkout@v3

      # ---------------------------
      # Set up JDK 21
      # ---------------------------
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # ---------------------------
      # Build Backend
      # ---------------------------
      - name: Build Backend
        run: mvn -B -f backend/pennypal/pom.xml clean package -DskipTests

      # ---------------------------
      # Set up Node.js & Build Frontend
      # ---------------------------
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install & Build Frontend
        run: |
          cd frontend/PennyPal-UI
          npm install
          npm run build --prod

      # ---------------------------
      # Build & Push Docker Images
      # ---------------------------
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Backend Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/pennypal-backend:latest ./backend/pennypal
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/pennypal-backend:latest

      - name: Build & Push Frontend Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/pennypal-frontend:latest ./frontend/PennyPal-UI
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/pennypal-frontend:latest

      # ---------------------------
      # Prepare Azure VM
      # ---------------------------
      - name: Create deployment directory on Azure VM
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_USER }}
          key: ${{ secrets.AZURE_SSH_KEY }}
          script: |
            mkdir -p /home/azureuser/pennypal

      # ---------------------------
      # Copy docker-compose.yml to Azure VM
      # ---------------------------
      - name: Copy docker-compose.yml
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_USER }}
          key: ${{ secrets.AZURE_SSH_KEY }}
          source: "docker-compose.yml"    # adjust if in a subfolder
          target: "/home/azureuser/pennypal/"

      # ---------------------------
      # Deploy on Azure VM
      # ---------------------------
      - name: Deploy on Azure VM
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_USER }}
          key: ${{ secrets.AZURE_SSH_KEY }}
          script: |
            cd /home/azureuser/pennypal

            echo "Pulling latest Docker images..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/pennypal-backend:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/pennypal-frontend:latest
            docker pull postgres:15
            docker pull redis:7

            echo "Stopping old containers..."
            docker-compose down || true

            echo "Creating .env file dynamically..."
            cat > pennypal.env <<EOF
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/pennypal
            SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}
            SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}
            JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }}
            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
            CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
            CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
            CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
            AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}
            MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
            MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
            EOF

            echo "Starting all containers..."
            docker-compose --env-file pennypal.env up -d
